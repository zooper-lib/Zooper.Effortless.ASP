name: NuGet Build and Publish

on:
  workflow_call:
    inputs:
      projectName:
        type: string
        required: true
      buildConfiguration:
        type: string
        default: 'Release'
      isPreRelease:
        type: boolean
        required: true
    secrets:
      NUGET_API_KEY:
        required: true

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      # Find the .csproj file by project name
      - name: Find .csproj file
        id: find_csproj
        run: |
          echo "Searching for .csproj file named '${{ inputs.projectName }}.csproj' in the repository..."
          CS_PROJ_PATH=$(find . -type f -name "${{ inputs.projectName }}.csproj" -print -quit)
          if [ -z "$CS_PROJ_PATH" ]; then
            echo "Error: No .csproj file named '${{ inputs.projectName }}.csproj' found in the repository."
            exit 1
          fi
          echo "Found .csproj file at: $CS_PROJ_PATH"
          echo "projectPath=$CS_PROJ_PATH" >> $GITHUB_OUTPUT
          echo "PROJECT_PATH=$CS_PROJ_PATH" >> $GITHUB_ENV

      # Extract version from Directory.Build.props
      - name: Get version from Directory.Build.props
        id: get_version
        run: |
          # Ensure Directory.Build.props exists
          if [ ! -f "Directory.Build.props" ]; then
            echo "Error: Directory.Build.props not found in the repository root."
            exit 1
          fi

          # Extract the <Version> element using grep and regex
          VERSION=$(grep -oP '(?<=<Version>)[^<]+' Directory.Build.props)

          if [ -z "$VERSION" ]; then
            echo "Error: <Version> tag not found in Directory.Build.props."
            exit 1
          fi

          echo "Extracted Version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # Set package version
      # Set package version based on pre-release flag
      - name: Set package version
        id: versioning
        run: |
          echo "Base semantic version: ${{ steps.get_version.outputs.version }}"
          if [ "${{ inputs.isPreRelease }}" == "true" ]; then
            BASE_VERSION=${{ steps.get_version.outputs.version }}

            # Fetch all tags matching the current base version with -preview.<number>
            EXISTING_PRE_RELEASE_TAGS=$(git tag --list "${BASE_VERSION}-preview.*")

            if [ -z "$EXISTING_PRE_RELEASE_TAGS" ]; then
              NEXT_PRE_RELEASE=1
            else
              # Extract the numerical part of pre-release tags
              PRE_RELEASE_NUMBERS=$(echo "$EXISTING_PRE_RELEASE_TAGS" | grep -oP '(?<=-preview\.)\d+$')

              # Initialize the maximum pre-release number
              MAX_PRE_RELEASE=0

              # Iterate through the numbers to find the maximum
              for num in $PRE_RELEASE_NUMBERS; do
                if [ "$num" -gt "$MAX_PRE_RELEASE" ]; then
                  MAX_PRE_RELEASE=$num
                fi
              done

              # Increment the maximum number to get the next pre-release number
              NEXT_PRE_RELEASE=$((MAX_PRE_RELEASE + 1))
            fi

            # Construct the new package version with the incremented pre-release number
            PACKAGE_VERSION="${BASE_VERSION}-preview.${NEXT_PRE_RELEASE}"
            echo "PACKAGE_VERSION=${PACKAGE_VERSION}" >> $GITHUB_ENV
            echo "Set PACKAGE_VERSION to ${PACKAGE_VERSION}"
          else
            # For non-pre-release builds, use the base version
            echo "PACKAGE_VERSION=${{ steps.get_version.outputs.version }}" >> $GITHUB_ENV
            echo "Set PACKAGE_VERSION to ${{ steps.get_version.outputs.version }}"
          fi

      # Set up .NET Core
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.x'

      # Restore dependencies
      - name: Restore dependencies
        run: dotnet restore "$PROJECT_PATH"

      # Build the project with the correct versioning
      - name: Build the project
        run: dotnet build "$PROJECT_PATH" --configuration "${{ inputs.buildConfiguration }}" /p:PackageVersion="${{ env.PACKAGE_VERSION }}"

      # Pack the NuGet package
      - name: Pack the NuGet package
        run: dotnet pack "$PROJECT_PATH" --configuration "${{ inputs.buildConfiguration }}" /p:PackageVersion="${{ env.PACKAGE_VERSION }}"

      # Publish the NuGet package
      - name: Publish to NuGet
        run: dotnet nuget push **/*.nupkg --api-key "${{ secrets.NUGET_API_KEY }}" --source https://api.nuget.org/v3/index.json
      
      # Tag the repository with the new package version
      - name: Create Git Tag
        if: success()
        run: |
          git tag "${{ env.PACKAGE_VERSION }}"
          git push origin "${{ env.PACKAGE_VERSION }}"